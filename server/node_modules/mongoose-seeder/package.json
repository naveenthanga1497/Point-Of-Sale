{
  "_args": [
    [
      {
        "raw": "mongoose-seeder",
        "scope": null,
        "escapedName": "mongoose-seeder",
        "name": "mongoose-seeder",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "c:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit\\server"
    ]
  ],
  "_from": "mongoose-seeder@latest",
  "_id": "mongoose-seeder@1.2.1",
  "_inCache": true,
  "_location": "/mongoose-seeder",
  "_nodeVersion": "4.0.0",
  "_npmUser": {
    "name": "samverschueren",
    "email": "sam.verschueren@gmail.com"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {
    "buffer-shims": "1.0.0",
    "core-util-is": "1.0.2",
    "debug": "2.6.9",
    "es6-promise": "3.2.1",
    "hooks-fixed": "2.0.2",
    "inherits": "2.0.3",
    "lodash.get": "4.4.2",
    "mpath": "0.5.1",
    "mpromise": "0.5.5",
    "ms": "2.0.0",
    "muri": "1.3.0",
    "process-nextick-args": "1.0.7",
    "regexp-clone": "0.0.1",
    "require_optional": "1.0.1",
    "safe-buffer": "5.1.2",
    "sliced": "1.0.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "mongoose-seeder",
    "scope": null,
    "escapedName": "mongoose-seeder",
    "name": "mongoose-seeder",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-seeder/-/mongoose-seeder-1.2.1.tgz",
  "_shasum": "f56965f445c2bd68e3b37883bc69f0dfa38258bf",
  "_shrinkwrap": null,
  "_spec": "mongoose-seeder",
  "_where": "c:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit\\server",
  "author": {
    "name": "Sam Verschueren",
    "email": "sam.verschueren@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/SamVerschueren/mongoose-seeder/issues"
  },
  "contributors": [
    {
      "name": "Sam Verschueren",
      "email": "sam.verschueren@gmail.com"
    }
  ],
  "dependencies": {
    "async": "^0.9.0",
    "lodash": "^3.6.0",
    "mongoose": "^4.0.3",
    "object-assign": "^4.0.1",
    "q": "^1.4.1"
  },
  "description": "Seed your MongoDB database easily",
  "devDependencies": {
    "chai": "^2.1.1",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.7",
    "mocha": "^2.2.1",
    "moment": "^2.9.0",
    "node-mongoose-validator": "^1.1.0",
    "sinon": "1.12.2",
    "sinon-chai": "^2.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f56965f445c2bd68e3b37883bc69f0dfa38258bf",
    "tarball": "https://registry.npmjs.org/mongoose-seeder/-/mongoose-seeder-1.2.1.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "d69237606debafe2bdf02e56ccdcd84bf51b72ce",
  "homepage": "https://github.com/SamVerschueren/mongoose-seeder",
  "keywords": [
    "MongoDB",
    "Mongoose",
    "seeder"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "samverschueren",
      "email": "sam.verschueren@gmail.com"
    }
  ],
  "name": "mongoose-seeder",
  "optionalDependencies": {},
  "readme": "# mongoose-seeder\n\n[![Build Status](https://travis-ci.org/SamVerschueren/mongoose-seeder.svg?branch=master)](https://travis-ci.org/SamVerschueren/mongoose-seeder)\n[![Coverage Status](https://coveralls.io/repos/SamVerschueren/mongoose-seeder/badge.svg?branch=master&service=github)](https://coveralls.io/github/SamVerschueren/mongoose-seeder?branch=master)\n\nWhen testing an application, you always want to start with the same database. It is a lot of work to manually create\ndummy data and link them together. When you want extra data to test with, you'll have to create your mongoose objects\nmanually in the ```before``` method of the entire testsuite.\n\nThis library offers a nice, clean and elegant solution that will create the dummy data objects from a JSON file.\n\n## Install\n\n```\nnpm install mongoose-seeder\n```\n\n## How to use\n\n```JavaScript\nvar seeder = require('mongoose-seeder'),\n    data = require('./data.json');\n\nseeder.seed(data).then(function(dbData) {\n    // The database objects are stored in dbData\n}).catch(function(err) {\n    // handle error\n});\n```\n\nThe ```seed``` function has two options.\n* **data**: The JSON objects that will be used to create the mongo documents.\n* **options**: [optional] Extra options that alter the behaviour. The default behaviour is drop the entire database before seeding it again.\n\n### Callbacks\n\nAlthough, promises are the preferred way of using the library. It's also possible to use a callback function as extra parameter\nin the seed function.\n\n```JavaScript\nseeder.seed(data, function(err, dbData) {\n    // ...\n})\n```\n\nSo actually, the seed function has three options if you want to use it with a callback. You can still provide the extra options\nas second parameter in the seed function.\n\n### Behaviour\n\nYou can also provide extra options that will indicate if the drop strategy. You can choose if the library should drop\nthe entire database before seeding it again. Another option is to only drop the collections that are being seeded. This\noffers the flexibility that you can manually add data to the database that keeps persisted. The third option is to do\nnothing and just add the data to the collections. The default behaviour is to drop the entire database before seeding.\n\n#### Drop database\n\nBy setting this property to ```true```, it will drop the entire database before creating the documents again. This\nis the default behaviour. If you set this property to ```false```, it will do nothing and just tries to append the\ndocuments to the collection.\n\n```JavaScript\n// Drop the entire database (default behaviour)\nseeder.seed(data, {dropDatabase: true}).then(function(dbData) {\n    // ...\n}).catch(function(err) {\n    // handle error\n});\n```\n\n#### Drop collections\n\nBy setting this option to ```true```, it will only drop the collections that are being seeded. If you have two collections\nfor example, but only one collection is filled by the seeder, only that collection will be dropped.\n\n```JavaScript\n// Drop the entire database (default behaviour)\nseeder.seed(data, {dropCollections: true}).then(function(dbData) {\n    // ...\n}).catch(function(err) {\n    // handle error\n});\n```\n\n### .json\n\n#### Simple data\n\nHow does a json file looks like? Take a look at this simple example.\n\n```json\n{\n    \"users\": {\n        \"_model\": \"User\",\n        \"foo\": {\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"email\": \"foo@bar.com\"\n        }\n    }\n}\n```\n\nIt will try to find the mongoose model ```User``` and calls the ```create``` method for the foo object.\n\nThe reason that this isn't an array of items, is because in the callback method, the second parameter returns the database object. This\nwill look like this.\n\n```json\n{\n    \"users\": {\n        \"foo\": {\n            \"_id\": \"550192679a3c881f4e7dc526\",\n            \"__v\": 0,\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"email\": \"foo@bar.com\"\n        }\n    }\n}\n```\n\nSo the foo user can be accessed as following.\n\n```JavaScript\n// Drop the entire database (default behaviour)\nseeder.seed(data, {dropCollections: true}, function(err, dbData) {\n    var foo = dbData.users.foo;\n});\n```\n\n#### References\n\nMost of the time, you have documents that have a reference to another document or to properties from another\ndocument. It is possible to do that with this library.\n\n```json\n{\n    \"users\": {\n        \"_model\": \"User\",\n        \"foo\": {\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"email\": \"foo@bar.com\",\n            \"hobbies\": [\n                \"cycling\",\n                \"swimming\"\n            ]\n        }\n    },\n    \"teams\": {\n        \"_model\": \"Team\",\n        \"teamA\": {\n            \"name\": \"Team A\",\n            \"users\": [\n                {\n                    \"user\": \"->users.foo\",\n                    \"email\": \"->users.foo.email\",\n                    \"hobies\": \"->users.foo.hobbies\"\n                }\n            ]\n        }\n    }\n}\n```\n\nA team holds a list of users with the ```_id``` and the ```email``` of that user. Notice that writing ```->users.foo``` is identical\nto writing ```->users.foo._id```.\n\nAnother thing that should be taken into account is that it's not possible to do a forward reference. This means that in this case,\na user cannot reference a team. The reason for this is that at the time the user is being created, the team does not yet exist. This\nwould be a nice feature for the future.\n\n#### Expressions\n\nSometimes you will need something as an expression, for instance to set the birthday of the user.\n\n```json\n{\n    \"users\": {\n        \"_model\": \"User\",\n        \"foo\": {\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"email\": \"foo@bar.com\",\n            \"birthday\": \"=new Date(1988, 08, 16)\"\n        }\n    }\n}\n```\n\nEvery statement that is preceded by an ```=```-sign will be evaluated by the native ```eval()``` method of JavaScript.\n\nWe can also bring it a step further and reference to the object itself. For instance, if we want to store the full name of\nthe user aswell, instead of adding it manually, you can do something like this.\n\n```json\n{\n    \"users\": {\n        \"_model\": \"User\",\n        \"foo\": {\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"fullName\": \"=this.firstName + ' ' + this.lastName\",\n            \"email\": \"foo@bar.com\",\n            \"birthday\": \"=new Date(1988, 08, 16)\"\n        }\n    }\n}\n```\n\nThe result of the ```fullName``` expression will be ```Foo Bar```. So every evaluation is evaluated in it's own context.\n\n#### Dependencies\n\nWhat if we don't want to make use of the plain old ```Date``` object, but instead use something like ```moment```. This is possible by\nadding a list of dependencies.\n\n```json\n{\n    \"_dependencies\": {\n        \"moment\": \"moment\"\n    },\n    \"users\": {\n        \"_model\": \"User\",\n        \"foo\": {\n            \"firstName\": \"Foo\",\n            \"name\": \"Bar\",\n            \"email\": \"foo@bar.com\",\n            \"birthday\": \"=moment('1988-08-16')\"\n        }\n    }\n}\n```\n\nIf you are using a dependency in your json file, be sure to install it as dependency in your project. If not, it will stop the execution\nand return a ```MODULE_NOT_FOUND``` error in the callback function.\n\n## Contributors\n\n- Sam Verschueren (Author) [<sam.verschueren@gmail.com>]\n\n## License\n\nMIT © Sam Verschueren\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SamVerschueren/mongoose-seeder.git"
  },
  "scripts": {
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | node_modules/.bin/coveralls && rm -rf ./coverage",
    "test": "mocha test"
  },
  "version": "1.2.1"
}
