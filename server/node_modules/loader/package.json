{
  "_args": [
    [
      {
        "raw": "loader",
        "scope": null,
        "escapedName": "loader",
        "name": "loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit"
    ]
  ],
  "_from": "loader@latest",
  "_id": "loader@2.1.1",
  "_inCache": true,
  "_location": "/loader",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/loader-2.1.1.tgz_1462429568830_0.32909604092128575"
  },
  "_npmUser": {
    "name": "jacksontian",
    "email": "shyvo1987@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "loader",
    "scope": null,
    "escapedName": "loader",
    "name": "loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/loader/-/loader-2.1.1.tgz",
  "_shasum": "8848b12a3f00572e5a4249333ccdac79773fb402",
  "_shrinkwrap": null,
  "_spec": "loader",
  "_where": "C:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit",
  "author": {
    "name": "Jackson Tian"
  },
  "bugs": {
    "url": "https://github.com/JacksonTian/loader/issues"
  },
  "config": {
    "travis-cov": {
      "threshold": 98
    }
  },
  "dependencies": {},
  "description": "Assets loader.",
  "devDependencies": {
    "coveralls": "*",
    "istanbul": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "should": "3.0.x",
    "travis-cov": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "8848b12a3f00572e5a4249333ccdac79773fb402",
    "tarball": "https://registry.npmjs.org/loader/-/loader-2.1.1.tgz"
  },
  "gitHead": "1d50cd2c2eb3b802a05b52a4980aa01a33bf9cb9",
  "homepage": "https://github.com/JacksonTian/loader#readme",
  "keywords": [
    "Loader"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jacksontian",
      "email": "shyvo1987@gmail.com"
    }
  ],
  "name": "loader",
  "optionalDependencies": {},
  "readme": "loader [![Build Status](https://secure.travis-ci.org/JacksonTian/loader.png?branch=master)](http://travis-ci.org/JacksonTian/loader) [![Coverage Status](https://coveralls.io/repos/JacksonTian/loader/badge.png)](https://coveralls.io/r/JacksonTian/loader)\n==========================\n\nNode静态资源加载器。该模块通过两个步骤配合完成，代码部分根据环境生成标签。上线时，需要调用minify方法进行静态资源的合并和压缩。\n\n# Usage\n## Installation\n\n```sh\n$ npm install loader\n```\n\n## Example\nController:\n\n```js\nres.render(tpl, {\n  Loader: require('loader')\n});\n```\nView:\n```html\n<%- Loader(\"/assets/scripts/jqueryplugin.js\", \"/assets/styles/jqueryplugin.css\")\n  .js(\"/assets/scripts/lib/jquery.jmodal.js\")\n  .js(\"/assets/scripts/lib/jquery.mousewheel.js\")\n  .js(\"/assets/scripts/lib/jquery.tagsphere.js\")\n  .css(\"/assets/styles/jquery.autocomplate.css\")\n  .done(assetsMap, prefix, combo) %>\n```\n\n在[loader-builder](https://github.com/JacksonTian/loader-builder)/[loader-connect](https://github.com/JacksonTian/loader-connect)/[loader-koa](https://github.com/JacksonTian/loader-koa)的支持下，`.js`方法也可以加载`.coffee`、`.es`类型的文件，`.css`方法可以加载`.less`、`.styl`文件。\n\n### 环境判别\n环境判别由`done`方法的第三个参数决定，如果传入combo值，将决定选用线下版本还是线上版本。如果不传入第三个参数，将由环境变量。如下代码实现：\n\n```js\nprocess.env.NODE_ENV === 'production'\n```\n如果不传入combo，需要设置环境，通过以下代码实现：\n\n```sh\n$ # 生产环境\n$ export NODE_ENV=\"production\"\n$ # 开发环境\n$ export NODE_ENV=\"dev\"\n```\n可切换进`example`目录运行示例代码：\n\n```sh\n$ npm start\n```\n\n### 线上输出\n线上模式将会输出合并和压缩后的地址，该地址从Loader构造参数中得到。\n\n```html\n<script src=\"/assets/scripts/jqueryplugin.md5_hash.js\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jqueryplugin.md5_hash.css\" media=\"all\" />\n```\n\n如果你有CDN地址，可以传入prefix参数，使得可以一键切换到CDN地址上，实现网络加速。以下为结果示例：\n\n```html\n<script src=\"http://cnodejs.qiniudn.com/assets/scripts/jqueryplugin.md5_hash.js\"></script>\n<link rel=\"stylesheet\" href=\"http://cnodejs.qiniudn.com/assets/styles/jqueryplugin.css\" media=\"all\" />\n```\n\n### 线下输出\n线下模式输出为原始的文件地址。\n\n```html\n<script src=\"/assets/scripts/lib/jquery.jmodal.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.mousewheel.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.tagsphere.js\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jquery.autocomplate.css\" media=\"all\" />\n```\n\n## 构建\n上文没有提及的重要值是`assetsMap`，这个值需要通过构建产生，类似如下格式：\n\n```json\n{\n  \"/assets/index.min.js\":\"/assets/index.min.ecf8427e.js\",\n  \"/assets/index.min.css\":\"/assets/index.min.f2fdeab1.css\"\n}\n```\n\n如果需要线上执行，需要该对象的传入。而该对象需要通过以下构建脚本（loader-builder）来生成：\n\n```sh\n$ builder <views_dir> <output_dir>\n$ # 或者\n$ ./node_modules/loader-builder/bin/builder <views_dir> <output_dir>\n```\n\n以上脚本将会遍历视图目录中寻找`Loader().js().css().done()`这样的标记，然后得到合并文件与实际文件的关系。如以上的`assets/index.min.js`文件并不一定需要真正存在，进行扫描构建后，会将相关的`js`文件进行编译和合并为一个文件。\n并且根据文件内容进行md5取hash值，最终生成`/assets/index.min.ecf8427e.js`这样的文件。\n\n遍历完目录后，将这些映射关系生成为`assets.json`文件，这个文件位于`<output_dir>`指定的目录下。使用时请正确引入该文件。具体请参见`example`目录下的代码示例。\n\n## 流程\n![流程](./figures/flow.png)\n\n## API\n请参见[API文档](http://doxmate.cool/JacksonTian/loader/api.html)。\n\n# License\n[MIT license](https://github.com/JacksonTian/loader/blob/master/MIT-License)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/JacksonTian/loader.git"
  },
  "scripts": {
    "test": "make test-all"
  },
  "version": "2.1.1"
}
