{
  "_args": [
    [
      {
        "raw": "local",
        "scope": null,
        "escapedName": "local",
        "name": "local",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "c:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit\\server"
    ]
  ],
  "_from": "local@latest",
  "_id": "local@0.3.3",
  "_inCache": true,
  "_location": "/local",
  "_nodeVersion": "5.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/local-0.3.3.tgz_1459929562895_0.3211138916667551"
  },
  "_npmUser": {
    "name": "adamhalasz",
    "email": "mail@adamhalasz.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {
    "lodash": "4.17.11"
  },
  "_requested": {
    "raw": "local",
    "scope": null,
    "escapedName": "local",
    "name": "local",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/local/-/local-0.3.3.tgz",
  "_shasum": "be3b133d0810cf66df63a9c6e4ada7c4dd0a9afc",
  "_shrinkwrap": null,
  "_spec": "local",
  "_where": "c:\\Users\\lenovo\\Desktop\\js.exercise.js\\credit\\server",
  "dependencies": {
    "async": "^2.0.0-rc.2"
  },
  "description": "Beautiful localization library for node.js",
  "devDependencies": {
    "expect.js": "0.3.1",
    "mocha": "1.21.4"
  },
  "directories": {},
  "dist": {
    "shasum": "be3b133d0810cf66df63a9c6e4ada7c4dd0a9afc",
    "tarball": "https://registry.npmjs.org/local/-/local-0.3.3.tgz"
  },
  "gitHead": "0a8aa0cccca50f7ef350efce0564a854fab893fd",
  "license": "MIT",
  "maintainers": [
    {
      "name": "adamhalasz",
      "email": "mail@adamhalasz.com"
    }
  ],
  "name": "local",
  "optionalDependencies": {},
  "readme": "# Local\n### Asynchronous localization library for node.js\n\n![Build Status](https://travis-ci.org/adamhalasz/local.svg?branch=master)\n\n```js\nvar Local = require('local')\nvar local = new Local()\nlocal.ready(SET)\n\nfunction SET(){\n\tlocal\n\t.set('HELLO')\n\t.in('SPANISH')\n\t.to('HOLA')\n\t.catch(errors)\n\t.then(GET)\n}\n\nfunction GET(){\n\tlocal\n\t.get('HELLO')\n\t.in('SPANISH')\n\t.catch(errors)\n\t.then(DISPLAY)\n}\n\nfunction DISPLAY(translation){\n\tconsole.log(translation) // -> HOLA\n}\n\nfunction errors(err){\n\tconsole.error(err)\n}\n```\n\n## Install\n```\nnpm install local\n```\n\n## Features\n- Ships with JSON Memory and FileStorage Drivers\n- Human Readable Get/Set API\n- Easy Locale Instantiation for Dynamic Localization\n- Custom Storage Setter/Getter API\n\n## How to Use\n\n### Initialize\n```js\nvar Local = require('local')\nvar local = new Local()\n```\n\n### Set\n**API**\n\n```js\nlocal\n.set($originValue)\n.to($translatedValue)\n.in($language)\n.then($successCallback) \n.catch($errorCallback)\n```\n\n**Example**\n```js\nlocal\n.set('hello')\n.to('hola')\n.in('spanish')\n.then(function(value){\n\tconsole.log(value)\n}) // one result argument\n.catch(function(error){\n\tconsole.error(error)\n}) // one error argument\n```\n\n### Get\n\n**API**\n```js\nlocal.get($query).in($language)\n```\n\n**Example**\n```js\nlocal.get('hello').in('spanish') // -> hola\n```\n\n### Locale\n\n**API**\n```\nvar locale = local.locale($language)\n    locale($query).then($successCallback).catch($errorCallback)\n```\n\n**Example**\n```js\nvar spanish = local.locale('spanish')\n\nspanish('hello').then(function(value){ \n\tconsole.log(value)  // -> hola\n\t\n}).catch(function(error){\n\tconsole.error(error)\n}) \n     \n```\n\n### Storage\n\n#### Defaults\n```js\n// memory\nvar local = new Local() \n\n// fileSystem\nvar local = new Local()\nlocal.storeTo('fileSystem', '/your/custom/path/local.json')\n```\n\n#### Custom Storage\n```js\n// custom storage driver\nfunction storageDriver(Local, options, finish){\n\tvar error = null\n\tvar memory = Local.memory\n\tvar storage = Local.storage('customStorage')\n\t\n\tstorage.getter(function(parent, query, language, translation, done){\n\t\t// ...\n\t})\n\t\n\tstorage.setter(function(parent, query, language, done){\n\t\t// ...\n\t})\n\t\t\n\tfinish(error, memory)\n}\n\n// initialize\nvar local = new Local()\n\n// load the new driver into this local instance\nlocal.storeTo(storageDriver)\n```\n\n\n\n## Tests\nTests are written with Mocha.js. To run the tests install mocha and run the tests with npm test.  \n```\nnpm install mocha -g\nnpm test\n```\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2016 Ádám Halász\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "scripts": {
    "test": "mocha tests"
  },
  "version": "0.3.3"
}
